// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: catze.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CatzeService_CategorizeURL_FullMethodName               = "/messages.CatzeService/CategorizeURL"
	CatzeService_CategorizeURLs_FullMethodName              = "/messages.CatzeService/CategorizeURLs"
	CatzeService_GenerateClassificationModel_FullMethodName = "/messages.CatzeService/GenerateClassificationModel"
	CatzeService_GetClassificationModel_FullMethodName      = "/messages.CatzeService/GetClassificationModel"
	CatzeService_UpdateClassificationModel_FullMethodName   = "/messages.CatzeService/UpdateClassificationModel"
	CatzeService_DeleteClassificationModel_FullMethodName   = "/messages.CatzeService/DeleteClassificationModel"
	CatzeService_ListClassificationModels_FullMethodName    = "/messages.CatzeService/ListClassificationModels"
)

// CatzeServiceClient is the client API for CatzeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatzeServiceClient interface {
	CategorizeURL(ctx context.Context, in *CategorizeURLRequest, opts ...grpc.CallOption) (*CategorizeURLResponse, error)
	CategorizeURLs(ctx context.Context, in *CategorizeURLsRequest, opts ...grpc.CallOption) (CatzeService_CategorizeURLsClient, error)
	GenerateClassificationModel(ctx context.Context, in *GenerateClassificationModelRequest, opts ...grpc.CallOption) (*Classifier, error)
	GetClassificationModel(ctx context.Context, in *GetClassificationModelRequest, opts ...grpc.CallOption) (*Classifier, error)
	UpdateClassificationModel(ctx context.Context, in *UpdateClassificationModelRequest, opts ...grpc.CallOption) (*Classifier, error)
	DeleteClassificationModel(ctx context.Context, in *DeleteClassificationModelRequest, opts ...grpc.CallOption) (*DeleteClassificationModelResponse, error)
	ListClassificationModels(ctx context.Context, in *ListClassificationModelsRequest, opts ...grpc.CallOption) (CatzeService_ListClassificationModelsClient, error)
}

type catzeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatzeServiceClient(cc grpc.ClientConnInterface) CatzeServiceClient {
	return &catzeServiceClient{cc}
}

func (c *catzeServiceClient) CategorizeURL(ctx context.Context, in *CategorizeURLRequest, opts ...grpc.CallOption) (*CategorizeURLResponse, error) {
	out := new(CategorizeURLResponse)
	err := c.cc.Invoke(ctx, CatzeService_CategorizeURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catzeServiceClient) CategorizeURLs(ctx context.Context, in *CategorizeURLsRequest, opts ...grpc.CallOption) (CatzeService_CategorizeURLsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CatzeService_ServiceDesc.Streams[0], CatzeService_CategorizeURLs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &catzeServiceCategorizeURLsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CatzeService_CategorizeURLsClient interface {
	Recv() (*CategorizeURLResponse, error)
	grpc.ClientStream
}

type catzeServiceCategorizeURLsClient struct {
	grpc.ClientStream
}

func (x *catzeServiceCategorizeURLsClient) Recv() (*CategorizeURLResponse, error) {
	m := new(CategorizeURLResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *catzeServiceClient) GenerateClassificationModel(ctx context.Context, in *GenerateClassificationModelRequest, opts ...grpc.CallOption) (*Classifier, error) {
	out := new(Classifier)
	err := c.cc.Invoke(ctx, CatzeService_GenerateClassificationModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catzeServiceClient) GetClassificationModel(ctx context.Context, in *GetClassificationModelRequest, opts ...grpc.CallOption) (*Classifier, error) {
	out := new(Classifier)
	err := c.cc.Invoke(ctx, CatzeService_GetClassificationModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catzeServiceClient) UpdateClassificationModel(ctx context.Context, in *UpdateClassificationModelRequest, opts ...grpc.CallOption) (*Classifier, error) {
	out := new(Classifier)
	err := c.cc.Invoke(ctx, CatzeService_UpdateClassificationModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catzeServiceClient) DeleteClassificationModel(ctx context.Context, in *DeleteClassificationModelRequest, opts ...grpc.CallOption) (*DeleteClassificationModelResponse, error) {
	out := new(DeleteClassificationModelResponse)
	err := c.cc.Invoke(ctx, CatzeService_DeleteClassificationModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catzeServiceClient) ListClassificationModels(ctx context.Context, in *ListClassificationModelsRequest, opts ...grpc.CallOption) (CatzeService_ListClassificationModelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CatzeService_ServiceDesc.Streams[1], CatzeService_ListClassificationModels_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &catzeServiceListClassificationModelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CatzeService_ListClassificationModelsClient interface {
	Recv() (*Classifier, error)
	grpc.ClientStream
}

type catzeServiceListClassificationModelsClient struct {
	grpc.ClientStream
}

func (x *catzeServiceListClassificationModelsClient) Recv() (*Classifier, error) {
	m := new(Classifier)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CatzeServiceServer is the server API for CatzeService service.
// All implementations should embed UnimplementedCatzeServiceServer
// for forward compatibility
type CatzeServiceServer interface {
	CategorizeURL(context.Context, *CategorizeURLRequest) (*CategorizeURLResponse, error)
	CategorizeURLs(*CategorizeURLsRequest, CatzeService_CategorizeURLsServer) error
	GenerateClassificationModel(context.Context, *GenerateClassificationModelRequest) (*Classifier, error)
	GetClassificationModel(context.Context, *GetClassificationModelRequest) (*Classifier, error)
	UpdateClassificationModel(context.Context, *UpdateClassificationModelRequest) (*Classifier, error)
	DeleteClassificationModel(context.Context, *DeleteClassificationModelRequest) (*DeleteClassificationModelResponse, error)
	ListClassificationModels(*ListClassificationModelsRequest, CatzeService_ListClassificationModelsServer) error
}

// UnimplementedCatzeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCatzeServiceServer struct {
}

func (UnimplementedCatzeServiceServer) CategorizeURL(context.Context, *CategorizeURLRequest) (*CategorizeURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategorizeURL not implemented")
}
func (UnimplementedCatzeServiceServer) CategorizeURLs(*CategorizeURLsRequest, CatzeService_CategorizeURLsServer) error {
	return status.Errorf(codes.Unimplemented, "method CategorizeURLs not implemented")
}
func (UnimplementedCatzeServiceServer) GenerateClassificationModel(context.Context, *GenerateClassificationModelRequest) (*Classifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateClassificationModel not implemented")
}
func (UnimplementedCatzeServiceServer) GetClassificationModel(context.Context, *GetClassificationModelRequest) (*Classifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassificationModel not implemented")
}
func (UnimplementedCatzeServiceServer) UpdateClassificationModel(context.Context, *UpdateClassificationModelRequest) (*Classifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClassificationModel not implemented")
}
func (UnimplementedCatzeServiceServer) DeleteClassificationModel(context.Context, *DeleteClassificationModelRequest) (*DeleteClassificationModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClassificationModel not implemented")
}
func (UnimplementedCatzeServiceServer) ListClassificationModels(*ListClassificationModelsRequest, CatzeService_ListClassificationModelsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListClassificationModels not implemented")
}

// UnsafeCatzeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatzeServiceServer will
// result in compilation errors.
type UnsafeCatzeServiceServer interface {
	mustEmbedUnimplementedCatzeServiceServer()
}

func RegisterCatzeServiceServer(s grpc.ServiceRegistrar, srv CatzeServiceServer) {
	s.RegisterService(&CatzeService_ServiceDesc, srv)
}

func _CatzeService_CategorizeURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategorizeURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatzeServiceServer).CategorizeURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatzeService_CategorizeURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatzeServiceServer).CategorizeURL(ctx, req.(*CategorizeURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatzeService_CategorizeURLs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CategorizeURLsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatzeServiceServer).CategorizeURLs(m, &catzeServiceCategorizeURLsServer{stream})
}

type CatzeService_CategorizeURLsServer interface {
	Send(*CategorizeURLResponse) error
	grpc.ServerStream
}

type catzeServiceCategorizeURLsServer struct {
	grpc.ServerStream
}

func (x *catzeServiceCategorizeURLsServer) Send(m *CategorizeURLResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CatzeService_GenerateClassificationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateClassificationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatzeServiceServer).GenerateClassificationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatzeService_GenerateClassificationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatzeServiceServer).GenerateClassificationModel(ctx, req.(*GenerateClassificationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatzeService_GetClassificationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassificationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatzeServiceServer).GetClassificationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatzeService_GetClassificationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatzeServiceServer).GetClassificationModel(ctx, req.(*GetClassificationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatzeService_UpdateClassificationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassificationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatzeServiceServer).UpdateClassificationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatzeService_UpdateClassificationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatzeServiceServer).UpdateClassificationModel(ctx, req.(*UpdateClassificationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatzeService_DeleteClassificationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClassificationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatzeServiceServer).DeleteClassificationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatzeService_DeleteClassificationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatzeServiceServer).DeleteClassificationModel(ctx, req.(*DeleteClassificationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatzeService_ListClassificationModels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListClassificationModelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatzeServiceServer).ListClassificationModels(m, &catzeServiceListClassificationModelsServer{stream})
}

type CatzeService_ListClassificationModelsServer interface {
	Send(*Classifier) error
	grpc.ServerStream
}

type catzeServiceListClassificationModelsServer struct {
	grpc.ServerStream
}

func (x *catzeServiceListClassificationModelsServer) Send(m *Classifier) error {
	return x.ServerStream.SendMsg(m)
}

// CatzeService_ServiceDesc is the grpc.ServiceDesc for CatzeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatzeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messages.CatzeService",
	HandlerType: (*CatzeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CategorizeURL",
			Handler:    _CatzeService_CategorizeURL_Handler,
		},
		{
			MethodName: "GenerateClassificationModel",
			Handler:    _CatzeService_GenerateClassificationModel_Handler,
		},
		{
			MethodName: "GetClassificationModel",
			Handler:    _CatzeService_GetClassificationModel_Handler,
		},
		{
			MethodName: "UpdateClassificationModel",
			Handler:    _CatzeService_UpdateClassificationModel_Handler,
		},
		{
			MethodName: "DeleteClassificationModel",
			Handler:    _CatzeService_DeleteClassificationModel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CategorizeURLs",
			Handler:       _CatzeService_CategorizeURLs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListClassificationModels",
			Handler:       _CatzeService_ListClassificationModels_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "catze.proto",
}
