// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: cat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CatService_GetCategory_FullMethodName             = "/messages.CatService/GetCategory"
	CatService_UpdateCategory_FullMethodName          = "/messages.CatService/UpdateCategory"
	CatService_AddURL_FullMethodName                  = "/messages.CatService/AddURL"
	CatService_DeleteURL_FullMethodName               = "/messages.CatService/DeleteURL"
	CatService_ReportMiscategorization_FullMethodName = "/messages.CatService/ReportMiscategorization"
	CatService_ListURLs_FullMethodName                = "/messages.CatService/ListURLs"
)

// CatServiceClient is the client API for CatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatServiceClient interface {
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*Category, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*Category, error)
	AddURL(ctx context.Context, in *AddURLRequest, opts ...grpc.CallOption) (*Category, error)
	DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*DeleteURLResponse, error)
	ReportMiscategorization(ctx context.Context, in *ReportMiscategorizationRequest, opts ...grpc.CallOption) (*Category, error)
	ListURLs(ctx context.Context, in *ListURLsRequest, opts ...grpc.CallOption) (CatService_ListURLsClient, error)
}

type catServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatServiceClient(cc grpc.ClientConnInterface) CatServiceClient {
	return &catServiceClient{cc}
}

func (c *catServiceClient) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, CatService_GetCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catServiceClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, CatService_UpdateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catServiceClient) AddURL(ctx context.Context, in *AddURLRequest, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, CatService_AddURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catServiceClient) DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*DeleteURLResponse, error) {
	out := new(DeleteURLResponse)
	err := c.cc.Invoke(ctx, CatService_DeleteURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catServiceClient) ReportMiscategorization(ctx context.Context, in *ReportMiscategorizationRequest, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, CatService_ReportMiscategorization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catServiceClient) ListURLs(ctx context.Context, in *ListURLsRequest, opts ...grpc.CallOption) (CatService_ListURLsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CatService_ServiceDesc.Streams[0], CatService_ListURLs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &catServiceListURLsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CatService_ListURLsClient interface {
	Recv() (*Category, error)
	grpc.ClientStream
}

type catServiceListURLsClient struct {
	grpc.ClientStream
}

func (x *catServiceListURLsClient) Recv() (*Category, error) {
	m := new(Category)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CatServiceServer is the server API for CatService service.
// All implementations should embed UnimplementedCatServiceServer
// for forward compatibility
type CatServiceServer interface {
	GetCategory(context.Context, *GetCategoryRequest) (*Category, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*Category, error)
	AddURL(context.Context, *AddURLRequest) (*Category, error)
	DeleteURL(context.Context, *DeleteURLRequest) (*DeleteURLResponse, error)
	ReportMiscategorization(context.Context, *ReportMiscategorizationRequest) (*Category, error)
	ListURLs(*ListURLsRequest, CatService_ListURLsServer) error
}

// UnimplementedCatServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCatServiceServer struct {
}

func (UnimplementedCatServiceServer) GetCategory(context.Context, *GetCategoryRequest) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedCatServiceServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedCatServiceServer) AddURL(context.Context, *AddURLRequest) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddURL not implemented")
}
func (UnimplementedCatServiceServer) DeleteURL(context.Context, *DeleteURLRequest) (*DeleteURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURL not implemented")
}
func (UnimplementedCatServiceServer) ReportMiscategorization(context.Context, *ReportMiscategorizationRequest) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMiscategorization not implemented")
}
func (UnimplementedCatServiceServer) ListURLs(*ListURLsRequest, CatService_ListURLsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListURLs not implemented")
}

// UnsafeCatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatServiceServer will
// result in compilation errors.
type UnsafeCatServiceServer interface {
	mustEmbedUnimplementedCatServiceServer()
}

func RegisterCatServiceServer(s grpc.ServiceRegistrar, srv CatServiceServer) {
	s.RegisterService(&CatService_ServiceDesc, srv)
}

func _CatService_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServiceServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatService_GetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServiceServer).GetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatService_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServiceServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatService_AddURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServiceServer).AddURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatService_AddURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServiceServer).AddURL(ctx, req.(*AddURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatService_DeleteURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServiceServer).DeleteURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatService_DeleteURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServiceServer).DeleteURL(ctx, req.(*DeleteURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatService_ReportMiscategorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportMiscategorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServiceServer).ReportMiscategorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatService_ReportMiscategorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServiceServer).ReportMiscategorization(ctx, req.(*ReportMiscategorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatService_ListURLs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListURLsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatServiceServer).ListURLs(m, &catServiceListURLsServer{stream})
}

type CatService_ListURLsServer interface {
	Send(*Category) error
	grpc.ServerStream
}

type catServiceListURLsServer struct {
	grpc.ServerStream
}

func (x *catServiceListURLsServer) Send(m *Category) error {
	return x.ServerStream.SendMsg(m)
}

// CatService_ServiceDesc is the grpc.ServiceDesc for CatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messages.CatService",
	HandlerType: (*CatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategory",
			Handler:    _CatService_GetCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _CatService_UpdateCategory_Handler,
		},
		{
			MethodName: "AddURL",
			Handler:    _CatService_AddURL_Handler,
		},
		{
			MethodName: "DeleteURL",
			Handler:    _CatService_DeleteURL_Handler,
		},
		{
			MethodName: "ReportMiscategorization",
			Handler:    _CatService_ReportMiscategorization_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListURLs",
			Handler:       _CatService_ListURLs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cat.proto",
}
