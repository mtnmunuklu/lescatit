// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: crawl.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Crawler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Category string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Created  int64  `protobuf:"varint,4,opt,name=created,proto3" json:"created,omitempty"`
	Updated  int64  `protobuf:"varint,5,opt,name=updated,proto3" json:"updated,omitempty"`
	Revision string `protobuf:"bytes,6,opt,name=revision,proto3" json:"revision,omitempty"`
	Data     string `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Crawler) Reset() {
	*x = Crawler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crawler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crawler) ProtoMessage() {}

func (x *Crawler) ProtoReflect() protoreflect.Message {
	mi := &file_crawl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crawler.ProtoReflect.Descriptor instead.
func (*Crawler) Descriptor() ([]byte, []int) {
	return file_crawl_proto_rawDescGZIP(), []int{0}
}

func (x *Crawler) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Crawler) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Crawler) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Crawler) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Crawler) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Crawler) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *Crawler) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type GetURLDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetURLDataRequest) Reset() {
	*x = GetURLDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetURLDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetURLDataRequest) ProtoMessage() {}

func (x *GetURLDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_crawl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetURLDataRequest.ProtoReflect.Descriptor instead.
func (*GetURLDataRequest) Descriptor() ([]byte, []int) {
	return file_crawl_proto_rawDescGZIP(), []int{1}
}

func (x *GetURLDataRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetURLDataRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetURLsDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetURLsDataRequest []*GetURLDataRequest `protobuf:"bytes,1,rep,name=getURLsDataRequest,proto3" json:"getURLsDataRequest,omitempty"`
}

func (x *GetURLsDataRequest) Reset() {
	*x = GetURLsDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetURLsDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetURLsDataRequest) ProtoMessage() {}

func (x *GetURLsDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_crawl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetURLsDataRequest.ProtoReflect.Descriptor instead.
func (*GetURLsDataRequest) Descriptor() ([]byte, []int) {
	return file_crawl_proto_rawDescGZIP(), []int{2}
}

func (x *GetURLsDataRequest) GetGetURLsDataRequest() []*GetURLDataRequest {
	if x != nil {
		return x.GetURLsDataRequest
	}
	return nil
}

type GetURLDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Data   string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetURLDataResponse) Reset() {
	*x = GetURLDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetURLDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetURLDataResponse) ProtoMessage() {}

func (x *GetURLDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_crawl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetURLDataResponse.ProtoReflect.Descriptor instead.
func (*GetURLDataResponse) Descriptor() ([]byte, []int) {
	return file_crawl_proto_rawDescGZIP(), []int{3}
}

func (x *GetURLDataResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetURLDataResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *GetURLDataResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CrawlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UserAgent is the User-Agent string used by HTTP requests
	UserAgent string `protobuf:"bytes,1,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	// MaxDepth limits the recursion depth of visited URLs.
	// Set it to 0 for infinite recursion (default).
	MaxDepth int64 `protobuf:"varint,2,opt,name=maxDepth,proto3" json:"maxDepth,omitempty"`
	// AllowedDomains is a domain whitelist.
	// Leave it blank to allow any domains to be visited
	AllowedDomains []string `protobuf:"bytes,3,rep,name=allowedDomains,proto3" json:"allowedDomains,omitempty"`
	// DisallowedDomains is a domain blacklist.
	DisallowedDomains []string `protobuf:"bytes,4,rep,name=disallowedDomains,proto3" json:"disallowedDomains,omitempty"`
	// DisallowedURLFilters is a list of regular expressions which restricts
	// visiting URLs. If any of the rules matches to a URL the
	// request will be stopped. DisallowedURLFilters will
	// be evaluated before URLFilters
	// Leave it blank to allow any URLs to be visited
	DisallowedUrlFilters []string `protobuf:"bytes,5,rep,name=disallowedUrlFilters,proto3" json:"disallowedUrlFilters,omitempty"`
	// URLFilters is a list of regular expressions which restricts
	// visiting URLs. If any of the rules matches to a URL the
	// request won't be stopped. DisallowedURLFilters will
	// be evaluated before URLFilters
	// Leave it blank to allow any URLs to be visited
	UrlFilters []string `protobuf:"bytes,6,rep,name=urlFilters,proto3" json:"urlFilters,omitempty"`
	// URLRevisit allows multiple downloads of the same URL
	UrlRevisit bool `protobuf:"varint,7,opt,name=urlRevisit,proto3" json:"urlRevisit,omitempty"`
	// MaxBodySize is the limit of the retrieved response body in bytes.
	// 0 means unlimited.
	// The default value for MaxBodySize is 10MB (10 * 1024 * 1024 bytes).
	MaxBodySize int64 `protobuf:"varint,8,opt,name=maxBodySize,proto3" json:"maxBodySize,omitempty"`
	// robotsTxt allows the Collector to ignore any restrictions set by
	// the target host's robots.txt file.  See http://www.robotstxt.org/ for more
	// information.
	RobotsTxt bool `protobuf:"varint,9,opt,name=robotsTxt,proto3" json:"robotsTxt,omitempty"`
}

func (x *CrawlRequest) Reset() {
	*x = CrawlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlRequest) ProtoMessage() {}

func (x *CrawlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_crawl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlRequest.ProtoReflect.Descriptor instead.
func (*CrawlRequest) Descriptor() ([]byte, []int) {
	return file_crawl_proto_rawDescGZIP(), []int{4}
}

func (x *CrawlRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *CrawlRequest) GetMaxDepth() int64 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

func (x *CrawlRequest) GetAllowedDomains() []string {
	if x != nil {
		return x.AllowedDomains
	}
	return nil
}

func (x *CrawlRequest) GetDisallowedDomains() []string {
	if x != nil {
		return x.DisallowedDomains
	}
	return nil
}

func (x *CrawlRequest) GetDisallowedUrlFilters() []string {
	if x != nil {
		return x.DisallowedUrlFilters
	}
	return nil
}

func (x *CrawlRequest) GetUrlFilters() []string {
	if x != nil {
		return x.UrlFilters
	}
	return nil
}

func (x *CrawlRequest) GetUrlRevisit() bool {
	if x != nil {
		return x.UrlRevisit
	}
	return false
}

func (x *CrawlRequest) GetMaxBodySize() int64 {
	if x != nil {
		return x.MaxBodySize
	}
	return 0
}

func (x *CrawlRequest) GetRobotsTxt() bool {
	if x != nil {
		return x.RobotsTxt
	}
	return false
}

type CrawlURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url          string        `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	CrawlRequest *CrawlRequest `protobuf:"bytes,2,opt,name=crawlRequest,proto3" json:"crawlRequest,omitempty"`
}

func (x *CrawlURLRequest) Reset() {
	*x = CrawlURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlURLRequest) ProtoMessage() {}

func (x *CrawlURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_crawl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlURLRequest.ProtoReflect.Descriptor instead.
func (*CrawlURLRequest) Descriptor() ([]byte, []int) {
	return file_crawl_proto_rawDescGZIP(), []int{5}
}

func (x *CrawlURLRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CrawlURLRequest) GetCrawlRequest() *CrawlRequest {
	if x != nil {
		return x.CrawlRequest
	}
	return nil
}

type CrawlURLsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls         []string      `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	CrawlRequest *CrawlRequest `protobuf:"bytes,2,opt,name=crawlRequest,proto3" json:"crawlRequest,omitempty"`
}

func (x *CrawlURLsRequest) Reset() {
	*x = CrawlURLsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlURLsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlURLsRequest) ProtoMessage() {}

func (x *CrawlURLsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_crawl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlURLsRequest.ProtoReflect.Descriptor instead.
func (*CrawlURLsRequest) Descriptor() ([]byte, []int) {
	return file_crawl_proto_rawDescGZIP(), []int{6}
}

func (x *CrawlURLsRequest) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *CrawlURLsRequest) GetCrawlRequest() *CrawlRequest {
	if x != nil {
		return x.CrawlRequest
	}
	return nil
}

type CrawlURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url   string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Links []string `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *CrawlURLResponse) Reset() {
	*x = CrawlURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlURLResponse) ProtoMessage() {}

func (x *CrawlURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_crawl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlURLResponse.ProtoReflect.Descriptor instead.
func (*CrawlURLResponse) Descriptor() ([]byte, []int) {
	return file_crawl_proto_rawDescGZIP(), []int{7}
}

func (x *CrawlURLResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CrawlURLResponse) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

var File_crawl_proto protoreflect.FileDescriptor

var file_crawl_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70,
	0x62, 0x22, 0xab, 0x01, 0x0a, 0x07, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x39, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5b, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x55, 0x52, 0x4c, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x12, 0x67, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x52,
	0x4c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x0c,
	0x43, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x72, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x72, 0x6c, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x54, 0x78, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x54, 0x78, 0x74,
	0x22, 0x59, 0x0a, 0x0f, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x10, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x55, 0x52, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x72, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x10, 0x43, 0x72, 0x61,
	0x77, 0x6c, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x32, 0xfe, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x55, 0x52, 0x4c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x52, 0x4c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x52, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x35, 0x0a, 0x08, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x55, 0x52, 0x4c,
	0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x55, 0x52, 0x4c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c,
	0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x61, 0x77, 0x6c, 0x55, 0x52, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_crawl_proto_rawDescOnce sync.Once
	file_crawl_proto_rawDescData = file_crawl_proto_rawDesc
)

func file_crawl_proto_rawDescGZIP() []byte {
	file_crawl_proto_rawDescOnce.Do(func() {
		file_crawl_proto_rawDescData = protoimpl.X.CompressGZIP(file_crawl_proto_rawDescData)
	})
	return file_crawl_proto_rawDescData
}

var file_crawl_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_crawl_proto_goTypes = []interface{}{
	(*Crawler)(nil),            // 0: pb.Crawler
	(*GetURLDataRequest)(nil),  // 1: pb.GetURLDataRequest
	(*GetURLsDataRequest)(nil), // 2: pb.GetURLsDataRequest
	(*GetURLDataResponse)(nil), // 3: pb.GetURLDataResponse
	(*CrawlRequest)(nil),       // 4: pb.CrawlRequest
	(*CrawlURLRequest)(nil),    // 5: pb.CrawlURLRequest
	(*CrawlURLsRequest)(nil),   // 6: pb.CrawlURLsRequest
	(*CrawlURLResponse)(nil),   // 7: pb.CrawlURLResponse
}
var file_crawl_proto_depIdxs = []int32{
	1, // 0: pb.GetURLsDataRequest.getURLsDataRequest:type_name -> pb.GetURLDataRequest
	4, // 1: pb.CrawlURLRequest.crawlRequest:type_name -> pb.CrawlRequest
	4, // 2: pb.CrawlURLsRequest.crawlRequest:type_name -> pb.CrawlRequest
	1, // 3: pb.CrawlService.GetURLData:input_type -> pb.GetURLDataRequest
	2, // 4: pb.CrawlService.GetURLsData:input_type -> pb.GetURLsDataRequest
	5, // 5: pb.CrawlService.CrawlURL:input_type -> pb.CrawlURLRequest
	6, // 6: pb.CrawlService.CrawlURLs:input_type -> pb.CrawlURLsRequest
	3, // 7: pb.CrawlService.GetURLData:output_type -> pb.GetURLDataResponse
	3, // 8: pb.CrawlService.GetURLsData:output_type -> pb.GetURLDataResponse
	7, // 9: pb.CrawlService.CrawlURL:output_type -> pb.CrawlURLResponse
	7, // 10: pb.CrawlService.CrawlURLs:output_type -> pb.CrawlURLResponse
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_crawl_proto_init() }
func file_crawl_proto_init() {
	if File_crawl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_crawl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crawler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetURLDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetURLsDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetURLDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlURLsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_crawl_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_crawl_proto_goTypes,
		DependencyIndexes: file_crawl_proto_depIdxs,
		MessageInfos:      file_crawl_proto_msgTypes,
	}.Build()
	File_crawl_proto = out.File
	file_crawl_proto_rawDesc = nil
	file_crawl_proto_goTypes = nil
	file_crawl_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CrawlServiceClient is the client API for CrawlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrawlServiceClient interface {
	GetURLData(ctx context.Context, in *GetURLDataRequest, opts ...grpc.CallOption) (*GetURLDataResponse, error)
	GetURLsData(ctx context.Context, in *GetURLsDataRequest, opts ...grpc.CallOption) (CrawlService_GetURLsDataClient, error)
	CrawlURL(ctx context.Context, in *CrawlURLRequest, opts ...grpc.CallOption) (*CrawlURLResponse, error)
	CrawlURLs(ctx context.Context, in *CrawlURLsRequest, opts ...grpc.CallOption) (CrawlService_CrawlURLsClient, error)
}

type crawlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlServiceClient(cc grpc.ClientConnInterface) CrawlServiceClient {
	return &crawlServiceClient{cc}
}

func (c *crawlServiceClient) GetURLData(ctx context.Context, in *GetURLDataRequest, opts ...grpc.CallOption) (*GetURLDataResponse, error) {
	out := new(GetURLDataResponse)
	err := c.cc.Invoke(ctx, "/pb.CrawlService/GetURLData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlServiceClient) GetURLsData(ctx context.Context, in *GetURLsDataRequest, opts ...grpc.CallOption) (CrawlService_GetURLsDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrawlService_serviceDesc.Streams[0], "/pb.CrawlService/GetURLsData", opts...)
	if err != nil {
		return nil, err
	}
	x := &crawlServiceGetURLsDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrawlService_GetURLsDataClient interface {
	Recv() (*GetURLDataResponse, error)
	grpc.ClientStream
}

type crawlServiceGetURLsDataClient struct {
	grpc.ClientStream
}

func (x *crawlServiceGetURLsDataClient) Recv() (*GetURLDataResponse, error) {
	m := new(GetURLDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crawlServiceClient) CrawlURL(ctx context.Context, in *CrawlURLRequest, opts ...grpc.CallOption) (*CrawlURLResponse, error) {
	out := new(CrawlURLResponse)
	err := c.cc.Invoke(ctx, "/pb.CrawlService/CrawlURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlServiceClient) CrawlURLs(ctx context.Context, in *CrawlURLsRequest, opts ...grpc.CallOption) (CrawlService_CrawlURLsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CrawlService_serviceDesc.Streams[1], "/pb.CrawlService/CrawlURLs", opts...)
	if err != nil {
		return nil, err
	}
	x := &crawlServiceCrawlURLsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrawlService_CrawlURLsClient interface {
	Recv() (*CrawlURLResponse, error)
	grpc.ClientStream
}

type crawlServiceCrawlURLsClient struct {
	grpc.ClientStream
}

func (x *crawlServiceCrawlURLsClient) Recv() (*CrawlURLResponse, error) {
	m := new(CrawlURLResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CrawlServiceServer is the server API for CrawlService service.
type CrawlServiceServer interface {
	GetURLData(context.Context, *GetURLDataRequest) (*GetURLDataResponse, error)
	GetURLsData(*GetURLsDataRequest, CrawlService_GetURLsDataServer) error
	CrawlURL(context.Context, *CrawlURLRequest) (*CrawlURLResponse, error)
	CrawlURLs(*CrawlURLsRequest, CrawlService_CrawlURLsServer) error
}

// UnimplementedCrawlServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCrawlServiceServer struct {
}

func (*UnimplementedCrawlServiceServer) GetURLData(context.Context, *GetURLDataRequest) (*GetURLDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLData not implemented")
}
func (*UnimplementedCrawlServiceServer) GetURLsData(*GetURLsDataRequest, CrawlService_GetURLsDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetURLsData not implemented")
}
func (*UnimplementedCrawlServiceServer) CrawlURL(context.Context, *CrawlURLRequest) (*CrawlURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrawlURL not implemented")
}
func (*UnimplementedCrawlServiceServer) CrawlURLs(*CrawlURLsRequest, CrawlService_CrawlURLsServer) error {
	return status.Errorf(codes.Unimplemented, "method CrawlURLs not implemented")
}

func RegisterCrawlServiceServer(s *grpc.Server, srv CrawlServiceServer) {
	s.RegisterService(&_CrawlService_serviceDesc, srv)
}

func _CrawlService_GetURLData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlServiceServer).GetURLData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CrawlService/GetURLData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlServiceServer).GetURLData(ctx, req.(*GetURLDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrawlService_GetURLsData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetURLsDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrawlServiceServer).GetURLsData(m, &crawlServiceGetURLsDataServer{stream})
}

type CrawlService_GetURLsDataServer interface {
	Send(*GetURLDataResponse) error
	grpc.ServerStream
}

type crawlServiceGetURLsDataServer struct {
	grpc.ServerStream
}

func (x *crawlServiceGetURLsDataServer) Send(m *GetURLDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CrawlService_CrawlURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlServiceServer).CrawlURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CrawlService/CrawlURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlServiceServer).CrawlURL(ctx, req.(*CrawlURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrawlService_CrawlURLs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CrawlURLsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrawlServiceServer).CrawlURLs(m, &crawlServiceCrawlURLsServer{stream})
}

type CrawlService_CrawlURLsServer interface {
	Send(*CrawlURLResponse) error
	grpc.ServerStream
}

type crawlServiceCrawlURLsServer struct {
	grpc.ServerStream
}

func (x *crawlServiceCrawlURLsServer) Send(m *CrawlURLResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CrawlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CrawlService",
	HandlerType: (*CrawlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetURLData",
			Handler:    _CrawlService_GetURLData_Handler,
		},
		{
			MethodName: "CrawlURL",
			Handler:    _CrawlService_CrawlURL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetURLsData",
			Handler:       _CrawlService_GetURLsData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CrawlURLs",
			Handler:       _CrawlService_CrawlURLs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "crawl.proto",
}
