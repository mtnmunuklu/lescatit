swagger: "2.0"
info:
  description: "Lescatit allows to categorize web pages."
  version: "1.0.0"
  title: "Lescatit API"
  contact:
    email: "metinmunuklu@gmail.com"
  license:
    name: "MIT"
    url: "https://github.com/mtnmunuklu/Lescatit/blob/main/LICENSE"
host: "lescatit.com"
tags:
- name: "auth"
  description: "Authentication api"
- name: "crawl"
  description: "Crawler api"
- name: "catze"
  description: "Categorizer api"
- name: "cat"
  description: "Categorization api"
schemes:
- "https"
paths:
  /signup:
    put:
      tags:
      - "auth"
      summary: "Performs the user registration process"
      description: ""
      operationId: "signup"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Signup object"
        required: true
        schema:
          $ref: "#/definitions/SignUp"
      responses:
        "201":
            description: "Created"
            schema:
              $ref: "#/definitions/User"
        "400":
            description: "Bad request"
            schema:
              $ref: "#/definitions/Error"
        "422":
            description: "Unprocessable entity"
            schema:
              $ref: "#/definitions/Error"
  /signin:
    post:
      tags:
      - "auth"
      summary: "Performs the user login process"
      description: ""
      operationId: "signin"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Signin object"
        required: true
        schema:
          $ref: "#/definitions/SignIn"
      responses:
        "200":
            description: "Ok"
            schema:
              $ref: "#/definitions/SignInResponse"
        "400":
            description: "Bad request"
            schema:
              $ref: "#/definitions/Error"
        "422":
            description: "Unprocessable entity"
            schema:
              $ref: "#/definitions/Error"
      security:
      - api_key: []
  /users:
    get:
      tags:
      - "auth"
      summary: "Performs listing all users"
      description: ""
      operationId: "getUsers"
      produces:
      - "application/json"
      responses:
        "200":
            description: "Ok"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/User"
        "400":
            description: "Bad request"
            schema:
              $ref: "#/definitions/Error"
        "422":
            description: "Unprocessable entity"
            schema:
              $ref: "#/definitions/Error"
      security:
      - api_key: []
  /users/{id}:
    get:
      tags:
      - "auth"
      summary: "Performs return the user by id"
      description: ""
      operationId: "getUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the user"
        required: true
        type: "string"
      responses:
        "200":
            description: "Ok"
            schema:
              $ref: "#/definitions/User"
        "400":
            description: "Bad request"
            schema:
              $ref: "#/definitions/Error"
        "422":
            description: "Unprocessable entity"
            schema:
              $ref: "#/definitions/Error"
      security:
      - api_key: []
    post:
      tags:
      - "auth"
      summary: "Performs update the user"
      description: ""
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the user"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "User update object"
        required: true
        schema:
          $ref: "#/definitions/UpdateUser"
      responses:
        "200":
            description: "Ok"
            schema:
              $ref: "#/definitions/User"
        "400":
            description: "Bad request"
            schema:
              $ref: "#/definitions/Error"
        "422":
            description: "Unprocessable entity"
            schema:
              $ref: "#/definitions/Error"
      security:
      - api_key: []
    delete:
      tags:
      - "auth"
      summary: "Performs delete the user"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the user"
        required: true
        type: "string"
      responses:
        "200":
            description: "Ok"
            schema:
              $ref: "#/definitions/DeleteUserResponse"
        "400":
            description: "Bad request"
            schema:
              $ref: "#/definitions/Error"
        "422":
            description: "Unprocessable entity"
            schema:
              $ref: "#/definitions/Error"
      security:
      - api_key: []
  /url_data:
    get:
      tags:
      - "crawl"
      summary: "Performs getting the content in the url address"
      description: ""
      operationId: "getURLData"
      produces:
      - "application/json"
      parameters:
      - name: "url"
        in: "header"
        description: "URL address"
        required: true
        type: "string"
      responses:
        "200":
            description: "Ok"
            schema:
              $ref: "#/definitions/GetURLDataResponse"
        "400":
            description: "Bad request"
            schema:
              $ref: "#/definitions/Error"
        "422":
            description: "Unprocessable entity"
            schema:
              $ref: "#/definitions/Error"
      security:
      - api_key: []
  /urls_data:
    get:
      tags:
      - "crawl"
      summary: "Performs getting the content in the url addresses"
      description: ""
      operationId: "getURLsData"
      produces:
      - "application/json"
      parameters:
      - name: "urls"
        in: "header"
        description: "URL addresses separated with virgul"
        required: true
        type: "string"
      responses:
        "200":
            description: "Ok"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/GetURLDataResponse"
        "400":
            description: "Bad request"
            schema:
              $ref: "#/definitions/Error"
        "422":
            description: "Unprocessable entity"
            schema:
              $ref: "#/definitions/Error"
      security:
      - api_key: []
  /url_crawl:
    post:
      tags:
      - "crawl"
      summary: "Performs crawl the url"
      description: ""
      operationId: "crawlURL"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Url crawl object"
        required: true
        schema:
          $ref: "#/definitions/CrawlURL"
      responses:
        "200":
            description: "Ok"
            schema:
              $ref: "#/definitions/CrawlURLResponse"
        "400":
            description: "Bad request"
            schema:
              $ref: "#/definitions/Error"
        "422":
            description: "Unprocessable entity"
            schema:
              $ref: "#/definitions/Error"
      security:
      - api_key: []
  /urls_crawl:
    post:
      tags:
      - "crawl"
      summary: "Performs crawl the urls"
      description: ""
      operationId: "crawlURLs"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Urls crawl object"
        required: true
        schema:
          $ref: "#/definitions/CrawlURLs"
      responses:
        "200":
            description: "Ok"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/CrawlURLResponse"
        "400":
            description: "Bad request"
            schema:
              $ref: "#/definitions/Error"
        "422":
            description: "Unprocessable entity"
            schema:
              $ref: "#/definitions/Error"
      security:
      - api_key: []
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      created:
        type: "integer"
        format: "int64"
      updated:
        type: "integer"
        format: "int64"
  SignUp:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
  SignIn:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  SignInResponse:
    type: "object"
    properties:
      user:
        $ref: "#/definitions/User"
      token:
        type: "string"
  UpdateUser:
    type: "object"
    properties:
      name:
        type: "string"
  DeleteUserResponse:
    type: "object"
    properties:
      id:
        type: "string"
  GetURLDataResponse:
    type: "object"
    properties:
      url:
        type: "string"
      data:
        type: "string"
      status:
        type: "string"
  Crawl:
    type: "object"
    properties:
      userAgent:
        type: "string"
      maxDepth:
        type: "integer"
        format: "int64"
      allowedDomains:
        type: "array"
        items:
          type: "string"
      disallowedDomains:
        type: "array"
        items:
          type: "string"
      disallowedUrlFilters:
        type: "array"
        items:
          type: "string"
      urlFilters:
        type: "array"
        items:
          type: "string"
      urlRevisit:
        type: "boolean"
      maxBodySize:
        type: "integer"
        format: "int64"
      robotsTxt:
        type: "boolean"
  CrawlURL:
    type: "object"
    properties:
      url:
        type: "string"
      crawlRequest:
        $ref: "#/definitions/Crawl"
  CrawlURLs:
    type: "object"
    properties:
      urls:
        type: "array"
        items:
          type: "string"
      crawlRequest:
        $ref: "#/definitions/Crawl"
  CrawlURLResponse:
    type: "object"
    properties:
      url:
        type: "string"
      links:
        type: "array"
        items:
          type: "string"
  Error:
    type: "object"
    properties:
      error:
        type: "string"